{"version":3,"sources":["components/About.jsx","components/Navbar.jsx","components/TextInput.jsx","App.js","reportWebVitals.js","index.js"],"names":["About","props","style1","color","backgroundColor","border","style2","className","id","type","style","mode","Navbar","to","title","home","about","onClick","handleMode","htmlFor","TextInput","useState","text","setText","onChange","event","target","value","rows","disabled","length","toUpperCase","toLowerCase","split","map","word","charAt","slice","join","filter","element","App","setMode","document","body","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ad0a267a.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function About(props) {\r\n\r\n  const style1={\r\n      color:\"white\",\r\n      backgroundColor:\"rgb(36 74 104)\",\r\n      border:\"1px solid \"\r\n  }\r\n  const style2={\r\n      color:\"#042743\",\r\n      backgroundColor:\"white\"\r\n  }\r\n\r\n  return (\r\n    <div className=\"container my-5\">\r\n      <h1 className=\"my-3\">About Us</h1>\r\n      <div className=\"accordion\" id=\"accordionExample\">\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"headingOne\">\r\n            <button\r\n              className=\"accordion-button\"\r\n              type=\"button\"\r\n              style={props.mode===\"light\"?style2:style1}\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseOne\"\r\n              aria-expanded=\"true\"\r\n              aria-controls=\"collapseOne\"\r\n            >\r\n              Accordion Item #1\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseOne\"\r\n            className=\"accordion-collapse collapse show\"\r\n            aria-labelledby=\"headingOne\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={props.mode===\"light\"?style2:style1}>\r\n              <strong>This is the first item's accordion body.</strong> It is\r\n              shown by default, until the collapse plugin adds the appropriate\r\n              classes that we use to style each element. These classes control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              style={props.mode===\"light\"?style2:style1}\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseTwo\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseTwo\"\r\n            >\r\n              Accordion Item #2\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseTwo\"\r\n            className=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"headingTwo\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={props.mode===\"light\"?style2:style1}>\r\n              <strong>This is the second item's accordion body.</strong> It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              classes that we use to style each element. These classes control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"headingThree\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              style={props.mode===\"light\"?style2:style1}\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseThree\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseThree\"\r\n            >\r\n              Accordion Item #3\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseThree\"\r\n            className=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"headingThree\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={props.mode===\"light\"?style2:style1}>\r\n              <strong>This is the third item's accordion body.</strong> It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              classes that we use to style each element. These classes control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <Link className=\"navbar-brand\" to=\"/\">\r\n          {props.title}\r\n        </Link>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\r\n                {props.home}\r\n              </Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/about\">\r\n                {props.about}\r\n              </Link>\r\n            </li>\r\n          </ul>\r\n          <div className=\"form-check form-switch\">\r\n          <input className=\"form-check-input\" onClick={props.handleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n          <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">{props.mode===\"light\"?\"Enable\":\"Disable\"} DarkMode</label>\r\n        </div>\r\n        </div>\r\n      </div>\r\n        \r\n    </nav>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function TextInput(props) {\r\n  const handleUpClick = () => {\r\n    setText(text.toUpperCase());\r\n  };\r\n  const handleLoClick = () => {\r\n    setText(text.toLowerCase());\r\n  };\r\n  const handleClearClick = () => {\r\n    setText(\"\");\r\n  };\r\n  const toTitleCase = () => {\r\n    setText(\r\n      text\r\n        .toLowerCase()\r\n        .split(\" \")\r\n        .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\r\n        .join(\" \")\r\n    );\r\n  };\r\n  const handleChange = (event) => {\r\n    setText(event.target.value);\r\n  };\r\n  const [text, setText] = useState(\"\");\r\n  return (\r\n    <>\r\n      <div className=\"mb-3 my-5\">\r\n        <h1>Enter the text below</h1>\r\n        <textarea\r\n          onChange={handleChange}\r\n          style={{backgroundColor:props.mode===\"light\"?\"white\":\"#13466e\",color:props.mode===\"light\"?\"black\":\"white\"}}\r\n          value={text}\r\n          className=\"form-control\"\r\n          id=\"exampleFormControlTextarea1\"\r\n          rows=\"8\"\r\n        ></textarea>\r\n      </div>\r\n      <button disabled={text.length===0} onClick={handleUpClick} className=\"btn btn-primary my-1\">\r\n        toUpperCase\r\n      </button>\r\n      <button disabled={text.length===0} onClick={handleLoClick} className=\"btn btn-primary mx-2 my-1\">\r\n        toLowerCase\r\n      </button>\r\n      <button disabled={text.length===0} onClick={handleClearClick} className=\"btn btn-primary my-1\">\r\n        Clear Text\r\n      </button>\r\n      <button disabled={text.length===0} onClick={toTitleCase} className=\"btn btn-primary mx-2 my-1\">\r\n        First letter uppercase\r\n      </button>\r\n      <div className=\"my-2\">\r\n        <h2>Your text summary</h2>\r\n        <p>\r\n          {text.length === 0 ? 0 : text.split(\" \").filter((element)=>{return element.length!==0}).length} words and{\" \"}\r\n          {text.length} characters\r\n        </p>\r\n        <p> {0.008 * text.split(\" \").filter((element)=>{return element.length!==0}).length} minutes read </p>\r\n      </div>\r\n\r\n      <h2>Preview</h2>\r\n      <p>\r\n        {text.length > 0 ? text : \"Nothing to preview!\"}\r\n      </p>\r\n    </>\r\n  );\r\n}\r\n","import { useState } from \"react\";\nimport \"./App.css\";\nimport About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport TextInput from \"./components/TextInput\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const handleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.color=\"white\";\n      document.body.style.backgroundColor=\"#042743\";\n    } else {\n      setMode(\"light\");\n      document.body.style.color=\"black\";\n      document.body.style.backgroundColor=\"white\";\n    }\n  };\n  return (\n    <>\n    <Router>\n      <div>\n        <Navbar\n          title=\"TextUtils\"\n          mode={mode}\n          handleMode={handleMode}\n          home=\"Home\"\n          about=\"About\"\n        />\n      </div>\n      <div className=\"container\">\n      <Switch>\n          <Route path=\"/about\">\n            <About mode={mode}/>\n          </Route>\n          <Route path=\"/\">\n          <TextInput mode={mode} />\n          </Route>\n        </Switch>\n      </div>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}